<?xml version="1.0" encoding="UTF-8"?>
<flow xmlns="http://www.springframework.org/schema/webflow"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/webflow
                          http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd">

	<!-- remaining to do or to complete : -->
	<!-- (1) 'BASIC' authentication (sub-flow ?) > is working but to be enhanced -->
	<!-- (2) caching (how to do ?) -->
	<!-- (3) [wfresh] management to clarify -->
	<!-- (4) 'wsignout1.0' (sub-flow ?) > to be completed -->
	<!-- (5) 'wsignoutcleanup1.0' (sub-flow ?) > to be completed -->
	<!-- (6) test with webapp & webservice projects > done -->
	<!-- (7) externalize 'BASIC'/'FORM' choice out of web flow definition > done -->
	<!-- (8) externalize choice between 2 possible abnormal exit points out of web flow definition -->
	<!-- (9) authentication delegation to remote idp for 'full' federation > done --> 
	<!-- (10) merge all protocol checks in one decision state > done --> 
	<!-- more ? -->



	<!-- configure flow -->
    <on-start>
        <evaluate expression="initialFlowSetupAction.submit(flowRequestContext)" />
    </on-start>

	<!-- protocol check -->
	<decision-state id="WSFederationRequestCheck">
		<if test="requestParameters.wa == null" then="viewBadRequest" />
		<if test="requestParameters.wa != 'wsignin1.0' and requestParameters.wa != 'wsignout1.0' and requestParameters.wa != 'wsignoutcleanup1.0'" then="viewBadRequest" />
		<if test="requestParameters.wa == 'wsignout1.0' or requestParameters.wa == 'wsignoutcleanup1.0'" then="invalidateSessionAction" />
		<if test="requestParameters.wtrealm == null or requestParameters.wtrealm.length() == 0" then="viewBadRequest" />
        <if test="externalContext.sessionMap['IDP_TOKEN'] == null" then="whrCheck" />
		<if test="externalContext.sessionMap['IDP_TOKEN'].isExpired() == true" then="whrCheck" />
		<if test="requestParameters.wfresh != null and requestParameters.wfresh.equals('0')" then="whrCheck" else="rpTokenAction" />
        <on-exit>
            <set name="flowScope.wtrealm" value="requestParameters.wtrealm" />
            <set name="flowScope.wctx" value="requestParameters.wctx" />
            <set name="flowScope.wreply" value="requestParameters.wreply" />
        </on-exit>
	</decision-state>
	
	<!-- browser requestor provided 'whr' -->
	<decision-state id="whrCheck">
		<if test="requestParameters.whr != null" then="viewRemote" else="authenticationRequired" />
	</decision-state>
	
	<!-- select authentication support type -->
	<decision-state id="authenticationRequired">
		<on-entry>
			<set name="externalContext.sessionMap['IDP_TOKEN']" value="null" />
<!-- 			<set name="requestScope.errorMessage" value="'Authentication type not supported.'"></set> -->
		</on-entry>
		<if test="flowScope.authSupportType == 'FORM'" then="formAuthenticationView" />
		<if test="flowScope.authSupportType == 'BASIC'" then="basicAuthenticationCheck" else="viewBadRequest" />
	</decision-state>
	
	<!-- display authentication form 'signinform.jsp' (username/password credentials) -->
	<view-state id="formAuthenticationView" view="signinform" model="usernamePasswordCredentials">
		<var name="usernamePasswordCredentials"
			class="org.apache.cxf.fediz.service.idp.UsernamePasswordCredentials" />
		<binder>
			<binding property="username" />
			<binding property="password" />
		</binder>
		<on-entry>
			<evaluate expression="externalContext.nativeResponse.setHeader('Cache-Control', 'no-store, no-cache, must-revalidate, private')" />
		</on-entry>
		<transition on="authenticate" bind="true" validate="true" to="idpUsernamePasswordTokenAction">
			<set name="flowScope.usernamePasswordCredentials" value="usernamePasswordCredentials" />
		</transition>
		<transition on="authenticate-remote" bind="false" validate="false" to="viewRemote" />
	</view-state>

 	<!-- redirect to remote idp -->
	<end-state id="viewRemote" view="externalRedirect:${flowScope.remoteIdpUrl}">
		<on-entry>
			<set name="flowScope.remoteIdpUrl"
				 value="requestParameters.whr
 					+'?wa='+requestParameters.wa
 					+'&amp;wtrealm='+requestParameters.wtrealm
 					+(requestParameters.wreply != null ? '&amp;wreply='+requestParameters.wreply : '')
 					+(requestParameters.wctx != null ? '&amp;wctx='+requestParameters.wctx : '')">
			</set>
		</on-entry>
	</end-state>

	<!-- check basic authentication state -->
    <decision-state id="basicAuthenticationCheck">
        <if test="externalContext.nativeRequest.getHeader('Authorization') == null" then="basicAuthenticationRequested" else="decodeBasicAuthenticationAction" />
    </decision-state>
    
	<!-- force basic authentication, exits with Http 401 Unauthorized -->
	<!-- warning : flow ends here. Decoding returned 'Authorization' header will be done by an other execution instance of flow (see 'decodeBasicAuthenticationAction') -->
    <end-state id="basicAuthenticationRequested" view="genericerror">
        <on-entry>
            <evaluate expression="externalContext.nativeResponse.setHeader('WWW-Authenticate', 'Basic realm='+flowScope.idpName)" />
            <evaluate expression="externalContext.nativeResponse.setHeader('Cache-Control', 'no-store, no-cache, must-revalidate, private')" />
            <evaluate expression="externalContext.nativeResponse.setStatus(401,'Invalid credentials')" />
            <set name="requestScope.reason" value="'Invalid credentials'" />
        </on-entry>
    </end-state>

	<!-- decode returned 'Authorization' header -->
	<action-state id="decodeBasicAuthenticationAction">
		<evaluate expression="decodeAuthorizationHeaderAction.submit(flowRequestContext)"
					result="flowScope.usernamePasswordCredentials" 
					result-type="org.apache.cxf.fediz.service.idp.UsernamePasswordCredentials" />
		<transition to="idpUsernamePasswordTokenAction" />
		<transition on-exception="java.lang.Throwable" to="scInternalServerError" />
	</action-state>

    <!-- produce IDP security token (as SecurityToken type) and store it in session -->
    <!-- catch SoapFault in case of wrong credentials to redirect the flow -->
	<action-state id="idpUsernamePasswordTokenAction">
		<evaluate expression="stsClientForIdpAction.submit(flowScope.usernamePasswordCredentials)"
					result="flowScope.idpToken" 
					result-type="org.apache.cxf.ws.security.tokenstore.SecurityToken" />
		<transition on="success" to="rpTokenAction">
			<set name="externalContext.sessionMap['IDP_TOKEN']" value="flowScope.idpToken" />
			<set name="externalContext.sessionMap['IDP_PRINCIPAL']" value="flowScope.usernamePasswordCredentials.username" />
		</transition>
        <transition on-exception="org.apache.cxf.binding.soap.SoapFault" to="authenticationFailedSwitch" />
        <transition on-exception="java.lang.Throwable" to="scInternalServerError" />
	</action-state>

	<!-- when authentication failed, depending on the authentication support type set -->
	<decision-state id="authenticationFailedSwitch">
		<if test="flowScope.authSupportType == 'FORM'" then="formAuthenticationView" />
		<if test="flowScope.authSupportType == 'BASIC'" then="basicAuthenticationRequested" />
	</decision-state>
	
	<!-- produce RP security token (as String type) -->
	<action-state id="rpTokenAction">
		<evaluate expression="stsClientForRpAction.submit(externalContext.sessionMap['IDP_TOKEN'], flowScope.wtrealm)" 
					result="flowScope.rpToken" 
					result-type="java.lang.String" />
		<transition to="formResponseView" />
        <transition on-exception="java.lang.Throwable" to="scInternalServerError" />
	</action-state>

	<!-- normal exit point for login -->
	<!-- browser redirection (self-submitted form 'signinresponseform.jsp') -->
	<end-state id="formResponseView" view="signinresponseform"> 
		<on-entry>
			<evaluate expression="flowScope.getString('wreply',flowScope.getString('wtrealm'))" result="requestScope.fedAction" /> <!-- note: use 'wtrealm' instead of 'wreply' if not set -->
			<evaluate expression="flowScope.getString('wctx')" result="requestScope.fedWCtx" />
			<evaluate expression="flowScope.getString('rpToken')" result="requestScope.fedWResult" />
		</on-entry>
	</end-state>
	
	<!-- abnormal exit point : Http 400 Bad Request -->
	<end-state id="viewBadRequest" view="genericerror">
		<on-entry>
			<evaluate expression="externalContext.nativeResponse.setStatus(400,flowRequestContext.currentTransition.toString())" />
			<set name="requestScope.reason" value="flowRequestContext.currentTransition" />
		</on-entry>
	</end-state>

    <!-- abnormal exit point : Http 500 Internal Server Error -->
	<end-state id="scInternalServerError" view="genericerror">
		<on-entry>
            <evaluate expression="externalContext.nativeResponse.setStatus(500,'IDP is unavailable, please contact the administrator')" />
            <set name="requestScope.reason" value="'IDP is unavailable, please contact the administrator'" />
		</on-entry>
	</end-state>

	<!-- invalidate IDP session -->
	<action-state id="invalidateSessionAction">
		<evaluate expression="logoutAction.submit(flowRequestContext)" />
		<transition on="success" to="endLogout" />
        <transition on-exception="java.lang.Throwable" to="scInternalServerError" />
	</action-state>

	<!-- normal exit point for logout -->
	<end-state id="endLogout" view="signoutresponse" /> 
	
</flow>
